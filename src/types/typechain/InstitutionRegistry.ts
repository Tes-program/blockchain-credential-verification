/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface InstitutionRegistryInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "getInstitutionByID(string)": FunctionFragment;
    "getInstitutionDetails(address)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "registerInstitution(address,string,string,string,string)": FunctionFragment;
    "setInstitutionStatus(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "getInstitutionByID"
      | "getInstitutionDetails"
      | "isRegistered"
      | "registerInstitution"
      | "setInstitutionStatus"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInstitutionByID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInstitutionDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerInstitution",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setInstitutionStatus",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInstitutionByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInstitutionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerInstitution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInstitutionStatus",
    data: BytesLike
  ): Result;

  events: {
    "InstitutionRegistered(address,string,string,uint256)": EventFragment;
    "InstitutionStatusChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstitutionRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InstitutionStatusChanged"): EventFragment;
}

export interface InstitutionRegisteredEventObject {
  institutionAddress: string;
  institutionId: string;
  name: string;
  registrationDate: BigNumber;
}
export type InstitutionRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber],
  InstitutionRegisteredEventObject
>;

export type InstitutionRegisteredEventFilter =
  TypedEventFilter<InstitutionRegisteredEvent>;

export interface InstitutionStatusChangedEventObject {
  institutionAddress: string;
  isActive: boolean;
}
export type InstitutionStatusChangedEvent = TypedEvent<
  [string, boolean],
  InstitutionStatusChangedEventObject
>;

export type InstitutionStatusChangedEventFilter =
  TypedEventFilter<InstitutionStatusChangedEvent>;

export interface InstitutionRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstitutionRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    getInstitutionByID(
      _institutionId: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, BigNumber] & {
        institutionAddress: string;
        name: string;
        institutionType: string;
        country: string;
        isActive: boolean;
        registrationDate: BigNumber;
      }
    >;

    getInstitutionDetails(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, BigNumber] & {
        institutionId: string;
        name: string;
        institutionType: string;
        country: string;
        isActive: boolean;
        registrationDate: BigNumber;
      }
    >;

    isRegistered(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerInstitution(
      _institutionAddress: string,
      _institutionId: string,
      _name: string,
      _institutionType: string,
      _country: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setInstitutionStatus(
      _institutionAddress: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  getInstitutionByID(
    _institutionId: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean, BigNumber] & {
      institutionAddress: string;
      name: string;
      institutionType: string;
      country: string;
      isActive: boolean;
      registrationDate: BigNumber;
    }
  >;

  getInstitutionDetails(
    _institutionAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean, BigNumber] & {
      institutionId: string;
      name: string;
      institutionType: string;
      country: string;
      isActive: boolean;
      registrationDate: BigNumber;
    }
  >;

  isRegistered(
    _institutionAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerInstitution(
    _institutionAddress: string,
    _institutionId: string,
    _name: string,
    _institutionType: string,
    _country: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setInstitutionStatus(
    _institutionAddress: string,
    _isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    getInstitutionByID(
      _institutionId: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, BigNumber] & {
        institutionAddress: string;
        name: string;
        institutionType: string;
        country: string;
        isActive: boolean;
        registrationDate: BigNumber;
      }
    >;

    getInstitutionDetails(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean, BigNumber] & {
        institutionId: string;
        name: string;
        institutionType: string;
        country: string;
        isActive: boolean;
        registrationDate: BigNumber;
      }
    >;

    isRegistered(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerInstitution(
      _institutionAddress: string,
      _institutionId: string,
      _name: string,
      _institutionType: string,
      _country: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInstitutionStatus(
      _institutionAddress: string,
      _isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InstitutionRegistered(address,string,string,uint256)"(
      institutionAddress?: string | null,
      institutionId?: null,
      name?: null,
      registrationDate?: null
    ): InstitutionRegisteredEventFilter;
    InstitutionRegistered(
      institutionAddress?: string | null,
      institutionId?: null,
      name?: null,
      registrationDate?: null
    ): InstitutionRegisteredEventFilter;

    "InstitutionStatusChanged(address,bool)"(
      institutionAddress?: string | null,
      isActive?: null
    ): InstitutionStatusChangedEventFilter;
    InstitutionStatusChanged(
      institutionAddress?: string | null,
      isActive?: null
    ): InstitutionStatusChangedEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    getInstitutionByID(
      _institutionId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInstitutionDetails(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerInstitution(
      _institutionAddress: string,
      _institutionId: string,
      _name: string,
      _institutionType: string,
      _country: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setInstitutionStatus(
      _institutionAddress: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInstitutionByID(
      _institutionId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInstitutionDetails(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      _institutionAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerInstitution(
      _institutionAddress: string,
      _institutionId: string,
      _name: string,
      _institutionType: string,
      _country: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setInstitutionStatus(
      _institutionAddress: string,
      _isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
