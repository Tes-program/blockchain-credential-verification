/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CredentialRegistryInterface extends utils.Interface {
  functions: {
    "getCredentialHash(string)": FunctionFragment;
    "institutionRegistry()": FunctionFragment;
    "issueCredential(string,string,string,string,uint256)": FunctionFragment;
    "revokeCredential(string)": FunctionFragment;
    "verifyCredential(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCredentialHash"
      | "institutionRegistry"
      | "issueCredential"
      | "revokeCredential"
      | "verifyCredential"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCredentialHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "institutionRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issueCredential",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCredential",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCredentialHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "institutionRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCredential",
    data: BytesLike
  ): Result;

  events: {
    "CredentialIssued(string,address,string,string,string,uint256)": EventFragment;
    "CredentialRevoked(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CredentialIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CredentialRevoked"): EventFragment;
}

export interface CredentialIssuedEventObject {
  credentialId: string;
  issuer: string;
  recipientId: string;
  credentialHash: string;
  ipfsHash: string;
  issueDate: BigNumber;
}
export type CredentialIssuedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  CredentialIssuedEventObject
>;

export type CredentialIssuedEventFilter =
  TypedEventFilter<CredentialIssuedEvent>;

export interface CredentialRevokedEventObject {
  credentialId: string;
  revokedDate: BigNumber;
}
export type CredentialRevokedEvent = TypedEvent<
  [string, BigNumber],
  CredentialRevokedEventObject
>;

export type CredentialRevokedEventFilter =
  TypedEventFilter<CredentialRevokedEvent>;

export interface CredentialRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CredentialRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCredentialHash(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    institutionRegistry(overrides?: CallOverrides): Promise<[string]>;

    issueCredential(
      _credentialId: string,
      _recipientId: string,
      _credentialHash: string,
      _ipfsHash: string,
      _expiryDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeCredential(
      _credentialId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyCredential(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string, BigNumber, boolean] & {
        isValid: boolean;
        issuer: string;
        recipientId: string;
        ipfsHash: string;
        issueDate: BigNumber;
        isRevoked: boolean;
      }
    >;
  };

  getCredentialHash(
    _credentialId: string,
    overrides?: CallOverrides
  ): Promise<string>;

  institutionRegistry(overrides?: CallOverrides): Promise<string>;

  issueCredential(
    _credentialId: string,
    _recipientId: string,
    _credentialHash: string,
    _ipfsHash: string,
    _expiryDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeCredential(
    _credentialId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyCredential(
    _credentialId: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, string, BigNumber, boolean] & {
      isValid: boolean;
      issuer: string;
      recipientId: string;
      ipfsHash: string;
      issueDate: BigNumber;
      isRevoked: boolean;
    }
  >;

  callStatic: {
    getCredentialHash(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<string>;

    institutionRegistry(overrides?: CallOverrides): Promise<string>;

    issueCredential(
      _credentialId: string,
      _recipientId: string,
      _credentialHash: string,
      _ipfsHash: string,
      _expiryDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeCredential(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyCredential(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, string, BigNumber, boolean] & {
        isValid: boolean;
        issuer: string;
        recipientId: string;
        ipfsHash: string;
        issueDate: BigNumber;
        isRevoked: boolean;
      }
    >;
  };

  filters: {
    "CredentialIssued(string,address,string,string,string,uint256)"(
      credentialId?: null,
      issuer?: string | null,
      recipientId?: null,
      credentialHash?: null,
      ipfsHash?: null,
      issueDate?: null
    ): CredentialIssuedEventFilter;
    CredentialIssued(
      credentialId?: null,
      issuer?: string | null,
      recipientId?: null,
      credentialHash?: null,
      ipfsHash?: null,
      issueDate?: null
    ): CredentialIssuedEventFilter;

    "CredentialRevoked(string,uint256)"(
      credentialId?: null,
      revokedDate?: null
    ): CredentialRevokedEventFilter;
    CredentialRevoked(
      credentialId?: null,
      revokedDate?: null
    ): CredentialRevokedEventFilter;
  };

  estimateGas: {
    getCredentialHash(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    institutionRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    issueCredential(
      _credentialId: string,
      _recipientId: string,
      _credentialHash: string,
      _ipfsHash: string,
      _expiryDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeCredential(
      _credentialId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyCredential(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCredentialHash(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    institutionRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueCredential(
      _credentialId: string,
      _recipientId: string,
      _credentialHash: string,
      _ipfsHash: string,
      _expiryDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeCredential(
      _credentialId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyCredential(
      _credentialId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
